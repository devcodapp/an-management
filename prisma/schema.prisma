// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Additional {
  id                    String                  @id @map("_id")
  name                  String
  price                 Float
  imageUrl              String
  imageId               String
  categoryId            String
  createdUser           String
  createdAt             DateTime                @default(now())
  deletedUser           String?
  deletedAt             DateTime?
  category              CategoryAdditional      @relation(name: "AdditionalToCategoryAdditional", fields: [categoryId], references: [id])
  AdditionalsOnProducts AdditionalsOnProducts[] @relation(name: "AdditionalToAdditionalsOnProducts")
}

model CategoryAdditional {
  id          String       @id @map("_id")
  Additional  Additional[] @relation(name: "AdditionalToCategoryAdditional")
  name        String
  order       Int
  companyId   String
  createdUser String
  createdAt   DateTime     @default(now())
  deletedUser String?
  deletedAt   DateTime?
  company     Company      @relation(name: "CategoryAdditionalToCompany", fields: [companyId], references: [id])
}

model Company {
  id                 String               @id @map("_id")
  CategoryAdditional CategoryAdditional[] @relation(name: "CategoryAdditionalToCompany")
  CategoryProduct    CategoryProduct[]    @relation(name: "CategoryProductToCompany")
  name               String
  description        String
  tags               String[]
  type               String
  address            Json?
  isOpened           Boolean              @default(false)
  openAt             String?
  closeAt            String?
  imageId            String?
  imageUrl           String?
  createdAt          DateTime             @default(now())
  disabledAt         DateTime?
  options            Option[]             @relation(name: "CompanyToOption")
  table              Table[]              @relation(name: "CompanyToTable")
}

model CategoryProduct {
  id          String    @id @map("_id")
  name        String
  description String
  order       Int
  imageId     String
  imageUrl    String
  createdUser String
  createdAt   DateTime  @default(now())
  deletedUser String?
  deletedAt   DateTime?
  Company     Company   @relation(name: "CategoryProductToCompany", fields: [companyId], references: [id])
  companyId   String
  Product     Product[] @relation(name: "CategoryProductToProduct")
}

model Option {
  id           String    @id @map("_id")
  name         String
  description  String
  defaultPrice Float?
  suboptions   Json[]
  companyId    String
  createdUser  String
  createdAt    DateTime  @default(now())
  deletedUser  String?
  deletedAt    DateTime?
  disabledAt   DateTime?
  company      Company   @relation(name: "CompanyToOption", fields: [companyId], references: [id])
}

model Product {
  id                    String                  @id @map("_id")
  name                  String
  description           String
  price                 Float
  sku                   String
  variants              Json[]
  images                Json[]
  createdUser           String
  createdAt             DateTime                @default(now())
  deletedUser           String?
  deletedAt             DateTime?
  disabledAt            DateTime?
  categoryId            String
  AdditionalsOnProducts AdditionalsOnProducts[] @relation(name: "AdditionalsOnProductsToProduct")
  CategoryProduct       CategoryProduct?        @relation(name: "CategoryProductToProduct", fields: [categoryId], references: [id])
}

model AdditionalsOnProducts {
  id           String      @id @map("_id")
  Additional   Additional? @relation(name: "AdditionalToAdditionalsOnProducts", fields: [additionalId], references: [id])
  additionalId String?
  Product      Product?    @relation(name: "AdditionalsOnProductsToProduct", fields: [productId], references: [id])
  productId    String?
}

model Table {
  id             String    @id @map("_id")
  name           String
  amountOfChairs Float
  createdUser    String
  createdAt      DateTime  @default(now())
  deletedUser    String?
  deletedAt      DateTime?
  Company        Company   @relation(name: "CompanyToTable", fields: [companyId], references: [id])
  companyId      String
}
