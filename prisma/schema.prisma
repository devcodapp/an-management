// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Coupon {
  id                 String     @id @map("_id")
  title              String
  description        String
  code               String
  discountValue      Float?
  discountPercentage Float?
  discountLimit      Float?
  expiresIn          DateTime
  createdUser        String
  createdAt          DateTime   @default(now())
  deletedUser        String?
  deletedAt          DateTime?
  deleted            Boolean    @default(false)
  restaurantId       String
  restaurant         Restaurant @relation(name: "CouponToRestaurant", fields: [restaurantId], references: [id])

  @@map("coupons")
}

model Restaurant {
  id           String    @id @map("_id")
  coupons      Coupon[]  @relation(name: "CouponToRestaurant")
  name         String
  description  String
  tags         String[]
  type         String
  address      Json?
  phoneNumber  String?
  isOpened     Boolean   @default(false)
  openingHours Json[]
  imageId      String?
  imageUrl     String?
  owner        Owner     @relation(name: "OwnerToRestaurant", fields: [ownerId], references: [id])
  createdAt    DateTime  @default(now())
  disabledAt   DateTime?
  disabled     Boolean   @default(false)
  ownerId      String
  tables       Table[]   @relation(name: "RestaurantToTable")
  users        User[]    @relation(name: "USERS")

  @@map("restaurants")
}

model Owner {
  id         String       @id @map("_id")
  name       String
  imageId    String?
  imageUrl   String?
  createdAt  DateTime     @default(now())
  deletedAt  DateTime?
  deleted    Boolean      @default(false)
  userId     String
  user       User         @relation(name: "OwnerToUser", fields: [userId], references: [id])
  Restaurant Restaurant[] @relation(name: "OwnerToRestaurant")

  @@map("owners")
}

model User {
  id             String      @id @map("_id")
  Owner          Owner[]     @relation(name: "OwnerToUser")
  role_users     Role_User[] @relation(name: "Role_UserToUser")
  username       String      @unique
  email          String
  password       String
  changePassword Boolean     @default(true)
  deletedAt      DateTime?
  restaurant     Restaurant? @relation(name: "USERS", fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurantId   String?
  workers        Worker[]    @relation(name: "UserToWorker")

  @@map("users")
}

model RestaurantType {
  id          String    @id @map("_id")
  name        String
  createdUser String
  createdAt   DateTime  @default(now())
  deletedUser String?
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  disabledAt  DateTime?
  disabled    Boolean   @default(false)

  @@map("restaurant_types")
}

model Role {
  id           String      @id @map("_id")
  name         String
  description  String
  permissions  Json[]
  createdAt    DateTime    @default(now())
  createdUser  String
  deletedAt    DateTime?
  deletedUser  String?
  deleted      Boolean     @default(false)
  restaurantId String
  role_users   Role_User[] @relation(name: "RoleToRole_User")

  @@map("roles")
}

model Role_User {
  id     String  @id @map("_id")
  role   Role?   @relation(name: "RoleToRole_User", fields: [roleId], references: [id])
  roleId String?
  user   User?   @relation(name: "Role_UserToUser", fields: [userId], references: [id])
  userId String?

  @@map("role_users")
}

model Table {
  id             String     @id @map("_id")
  name           String
  amountOfChairs Float
  isOccupied     Boolean    @default(false)
  isReserved     Boolean    @default(false)
  disabled       Boolean    @default(false)
  disabledAt     DateTime?
  createdUser    String
  createdAt      DateTime   @default(now())
  deletedUser    String?
  deletedAt      DateTime?
  deleted        Boolean    @default(false)
  restaurant     Restaurant @relation(name: "RestaurantToTable", fields: [restaurantId], references: [id])
  restaurantId   String

  @@map("tables")
}

model Worker {
  id          String    @id @map("_id")
  name        String
  imageId     String?
  imageUrl    String?
  createdUser String
  createdAt   DateTime  @default(now())
  deletedUser String?
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  userId      String
  user        User      @relation(name: "UserToWorker", fields: [userId], references: [id])

  @@map("workers")
}
