// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Additional {
  id          String                  @id @map("_id")
  name        String
  price       Float
  imageUrl    String
  imageId     String
  categoryId  String
  createdUser String
  createdAt   DateTime                @default(now())
  deletedUser String?
  deletedAt   DateTime?
  deleted     Boolean                 @default(false)
  category    CategoryAdditional      @relation(name: "AdditionalToCategoryAdditional", fields: [categoryId], references: [id])
  products    AdditionalsOnProducts[] @relation(name: "AdditionalToAdditionalsOnProducts")
}

model CategoryAdditional {
  id           String       @id @map("_id")
  additionals  Additional[] @relation(name: "AdditionalToCategoryAdditional")
  name         String
  order        Int
  restaurantId String
  createdUser  String
  createdAt    DateTime     @default(now())
  deletedUser  String?
  deletedAt    DateTime?
  deleted      Boolean      @default(false)
  restaurant   Restaurant   @relation(name: "CategoryAdditionalToRestaurant", fields: [restaurantId], references: [id])
}

model Restaurant {
  id                  String               @id @map("_id")
  categoryAdditionals CategoryAdditional[] @relation(name: "CategoryAdditionalToRestaurant")
  categoryProducts    CategoryProduct[]    @relation(name: "CategoryProductToRestaurant")
  coupons             Coupon[]             @relation(name: "CouponToRestaurant")
  options             Option[]             @relation(name: "OptionToRestaurant")
  name                String
  description         String
  tags                String[]
  type                String
  address             Json?
  isOpened            Boolean              @default(false)
  openingHours        Json?
  imageId             String?
  imageUrl            String?
  ownerId             String
  createdAt           DateTime             @default(now())
  disabledAt          DateTime?
  disabled            Boolean              @default(false)
  tables              Table[]              @relation(name: "RestaurantToTable")
  owner               User                 @relation(name: "OWNER", fields: [ownerId], references: [id])
  users               User[]               @relation(name: "USERS")
}

model CategoryProduct {
  id           String     @id @map("_id")
  name         String
  description  String
  order        Int
  imageId      String
  imageUrl     String
  enabled      Boolean    @default(false)
  createdUser  String
  createdAt    DateTime   @default(now())
  deletedUser  String?
  deletedAt    DateTime?
  deleted      Boolean    @default(false)
  Restaurant   Restaurant @relation(name: "CategoryProductToRestaurant", fields: [restaurantId], references: [id])
  restaurantId String
  product      Product[]  @relation(name: "CategoryProductToProduct")
}

model Coupon {
  id                 String     @id @map("_id")
  title              String
  description        String
  code               String
  discountValue      Float?
  discountPercentage Float?
  discountLimit      Float?
  expiresIn          DateTime
  createdUser        String
  createdAt          DateTime   @default(now())
  deletedUser        String?
  deletedAt          DateTime?
  deleted            Boolean    @default(false)
  restaurantId       String
  restaurant         Restaurant @relation(name: "CouponToRestaurant", fields: [restaurantId], references: [id])
}

model Option {
  id           String     @id @map("_id")
  name         String
  description  String
  defaultPrice Float?
  suboptions   Json[]
  restaurantId String
  createdUser  String
  createdAt    DateTime   @default(now())
  deletedUser  String?
  deletedAt    DateTime?
  deleted      Boolean    @default(false)
  disabledAt   DateTime?
  disabled     Boolean    @default(false)
  restaurant   Restaurant @relation(name: "OptionToRestaurant", fields: [restaurantId], references: [id])
}

model Product {
  id          String                  @id @map("_id")
  name        String
  description String
  price       Float
  sku         String
  variants    Json[]
  images      Json[]
  createdUser String
  createdAt   DateTime                @default(now())
  deletedUser String?
  deletedAt   DateTime?
  deleted     Boolean                 @default(false)
  disabledAt  DateTime?
  disabled    Boolean                 @default(false)
  categoryId  String
  additionals AdditionalsOnProducts[] @relation(name: "AdditionalsOnProductsToProduct")
  category    CategoryProduct?        @relation(name: "CategoryProductToProduct", fields: [categoryId], references: [id])
}

model AdditionalsOnProducts {
  id           String      @id @map("_id")
  additional   Additional? @relation(name: "AdditionalToAdditionalsOnProducts", fields: [additionalId], references: [id])
  additionalId String?
  product      Product?    @relation(name: "AdditionalsOnProductsToProduct", fields: [productId], references: [id])
  productId    String?
}

model Table {
  id             String     @id @map("_id")
  name           String
  amountOfChairs Float
  disabledAt     DateTime?
  createdUser    String
  createdAt      DateTime   @default(now())
  deletedUser    String?
  deletedAt      DateTime?
  deleted        Boolean    @default(false)
  restaurant     Restaurant @relation(name: "RestaurantToTable", fields: [restaurantId], references: [id])
  restaurantId   String
}

model Worker {
  id          String    @id @map("_id")
  name        String
  role        String
  imageId     String?
  imageUrl    String?
  createdUser String
  createdAt   DateTime  @default(now())
  deletedUser String?
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  userId      String
  user        User      @relation(name: "UserToWorker", fields: [userId], references: [id])
}

model User {
  id             String       @id @map("_id")
  workers        Worker[]     @relation(name: "UserToWorker")
  username       String
  email          String
  password       String
  changePassword Boolean      @default(true)
  deletedAt      DateTime?
  restaurant     Restaurant?  @relation(name: "USERS", fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurantId   String?
  Restaurant     Restaurant[] @relation(name: "OWNER")
}
